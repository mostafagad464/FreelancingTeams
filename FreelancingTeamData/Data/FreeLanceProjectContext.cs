// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using FreelancingTeamData.Models;

namespace FreelancingTeamData.Data
{
    public partial class FreeLanceProjectContext : DbContext
    {
        public FreeLanceProjectContext()
        {
        }

        public FreeLanceProjectContext(DbContextOptions<FreeLanceProjectContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<ClientCredit> ClientCredits { get; set; }
        public virtual DbSet<ClientLanguage> ClientLanguages { get; set; }
        public virtual DbSet<ClientSendTransactionToTeam> ClientSendTransactionToTeams { get; set; }
        public virtual DbSet<Complain> Complains { get; set; }
        public virtual DbSet<Education> Educations { get; set; }
        public virtual DbSet<Experience> Experiences { get; set; }
        public virtual DbSet<Freelancer> Freelancers { get; set; }
        public virtual DbSet<FreelancerAccountBank> FreelancerAccountBanks { get; set; }
        public virtual DbSet<FreelancerCredit> FreelancerCredits { get; set; }
        public virtual DbSet<FreelancerHasSkill> FreelancerHasSkills { get; set; }
        public virtual DbSet<FreelancerJoinTeam> FreelancerJoinTeams { get; set; }
        public virtual DbSet<FreelancerLanguage> FreelancerLanguages { get; set; }
        public virtual DbSet<FreelancerTeamTransaction> FreelancerTeamTransactions { get; set; }
        public virtual DbSet<Portoflio> Portoflios { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectHasReview> ProjectHasReviews { get; set; }
        public virtual DbSet<Review> Reviews { get; set; }
        public virtual DbSet<Skill> Skills { get; set; }
        public virtual DbSet<Social> Socials { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamBidsProject> TeamBidsProjects { get; set; }
        public virtual DbSet<TeamLanguage> TeamLanguages { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<UserAccount> UserAccounts { get; set; }
        public virtual DbSet<Wallet> Wallets { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            // ! 
            if (optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=FreeLanceProject;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Certificate>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.Title });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.Certificates)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Certificate_Freelancer");
            });

            modelBuilder.Entity<Client>(entity =>
            {
                entity.HasOne(d => d.Admin)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.AdminId)
                    .HasConstraintName("FK_Client_Admin");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("FK_Client_UserAccount");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Clients)
                    .HasForeignKey(d => d.WalletId)
                    .HasConstraintName("FK_Client_Wallet");
            });

            modelBuilder.Entity<ClientCredit>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.CreditNumber });

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientCredits)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientCredit_Client");
            });

            modelBuilder.Entity<ClientLanguage>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.Language });

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientLanguages)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientLanguage_Client");
            });

            modelBuilder.Entity<ClientSendTransactionToTeam>(entity =>
            {
                entity.HasKey(e => new { e.ClientId, e.TeamId, e.TransactionId });

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.ClientSendTransactionToTeams)
                    .HasForeignKey(d => d.ClientId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSendTransactionToTeam_Client");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.ClientSendTransactionToTeams)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSendTransactionToTeam_Team");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.ClientSendTransactionToTeams)
                    .HasForeignKey(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClientSendTransactionToTeam_Transaction");
            });

            modelBuilder.Entity<Complain>(entity =>
            {
                entity.HasOne(d => d.AdminHandler)
                    .WithMany(p => p.Complains)
                    .HasForeignKey(d => d.AdminHandlerId)
                    .HasConstraintName("FK_Complain_Admin");

                entity.HasOne(d => d.Client)
                    .WithMany(p => p.Complains)
                    .HasForeignKey(d => d.ClientId)
                    .HasConstraintName("FK_Complain_Client");

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.Complains)
                    .HasForeignKey(d => d.FreelancerId)
                    .HasConstraintName("FK_Complain_Freelancer");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.Complains)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK_Complain_Team");
            });

            modelBuilder.Entity<Education>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.gradYear });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.Educations)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Education_Freelancer");
            });

            modelBuilder.Entity<Experience>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.JobTitle, e.CompanyName });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.Experiences)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Experience_Freelancer");
            });

            modelBuilder.Entity<Freelancer>(entity =>
            {
                entity.HasOne(d => d.Admin)
                    .WithMany(p => p.Freelancers)
                    .HasForeignKey(d => d.AdminId)
                    .HasConstraintName("FK_Freelancer_Admin");

                //entity.HasOne(d => d.User)
                //    .WithMany(p => p.Freelancers)
                //    .HasForeignKey(d => d.UserId)
                //    .HasConstraintName("FK_Freelancer_UserAccount");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Freelancers)
                    .HasForeignKey(d => d.WalletId)
                    .HasConstraintName("FK_Freelancer_Wallet");
            });

            modelBuilder.Entity<FreelancerAccountBank>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.Account });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.FreelancerAccountBanks)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerAccountBank_Freelancer");
            });

            modelBuilder.Entity<FreelancerCredit>(entity =>
            {
                entity.HasKey(e => new { e.FreelacerId, e.CreditNumber });

                entity.HasOne(d => d.Freelacer)
                    .WithMany(p => p.FreelancerCredits)
                    .HasForeignKey(d => d.FreelacerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerCredit_Freelancer");
            });

            modelBuilder.Entity<FreelancerHasSkill>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.SkillId });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.FreelancerHasSkills)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerHasSkill_Freelancer");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.FreelancerHasSkills)
                    .HasForeignKey(d => d.SkillId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerHasSkill_Skill");
            });

            modelBuilder.Entity<FreelancerJoinTeam>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.TeamId });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.FreelancerJoinTeams)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerJoinTeam_Freelancer");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.FreelancerJoinTeams)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerJoinTeam_Team");
            });

            modelBuilder.Entity<FreelancerLanguage>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.Language });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.FreelancerLanguages)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerLanguage_Freelancer");
            });

            modelBuilder.Entity<FreelancerTeamTransaction>(entity =>
            {
                entity.HasKey(e => new { e.FreelancerId, e.TeamId, e.TransactionId });

                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.FreelancerTeamTransactions)
                    .HasForeignKey(d => d.FreelancerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerTeamTransaction_Freelancer");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.FreelancerTeamTransactions)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerTeamTransaction_Team");

                entity.HasOne(d => d.Transaction)
                    .WithMany(p => p.FreelancerTeamTransactions)
                    .HasForeignKey(d => d.TransactionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FreelancerTeamTransaction_Transaction");
            });

            modelBuilder.Entity<Portoflio>(entity =>
            {
                entity.HasOne(d => d.Freelancer)
                    .WithMany(p => p.Portoflios)
                    .HasForeignKey(d => d.FreelancerId)
                    .HasConstraintName("FK_Portoflio_Freelancer");
            });

            modelBuilder.Entity<Project>(entity =>
            {
                entity.HasOne(d => d.Team)
                    .WithMany(p => p.Projects)
                    .HasForeignKey(d => d.TeamId)
                    .HasConstraintName("FK_Project_Team");

                entity.HasMany(d => d.Skills)
                    .WithMany(p => p.Projects)
                    .UsingEntity<Dictionary<string, object>>(
                        "ProjectNeedSkill",
                        l => l.HasOne<Skill>().WithMany().HasForeignKey("SkillId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProjectNeedSkill_Skill"),
                        r => r.HasOne<Project>().WithMany().HasForeignKey("ProjectId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_ProjectNeedSkill_Project"),
                        j =>
                        {
                            j.HasKey("ProjectId", "SkillId");

                            j.ToTable("ProjectNeedSkill");
                        });
            });

            modelBuilder.Entity<ProjectHasReview>(entity =>
            {
                entity.HasKey(e => new { e.ProjectId, e.ReviewId });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.ProjectHasReviews)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectHasReview_Project");

                entity.HasOne(d => d.Review)
                    .WithMany(p => p.ProjectHasReviews)
                    .HasForeignKey(d => d.ReviewId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProjectHasReview_Review");
            });

            modelBuilder.Entity<Skill>(entity =>
            {
                entity.HasMany(d => d.Categories)
                    .WithMany(p => p.Skills)
                    .UsingEntity<Dictionary<string, object>>(
                        "CategoryOfSkill",
                        l => l.HasOne<Category>().WithMany().HasForeignKey("CategoryId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CategoryOfSkill_Category"),
                        r => r.HasOne<Skill>().WithMany().HasForeignKey("SkillId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_CategoryOfSkill_Skill"),
                        j =>
                        {
                            j.HasKey("SkillId", "CategoryId");

                            j.ToTable("CategoryOfSkill");
                        });

                entity.HasMany(d => d.Portoflios)
                    .WithMany(p => p.Skills)
                    .UsingEntity<Dictionary<string, object>>(
                        "PortoflioHasSkill",
                        l => l.HasOne<Portoflio>().WithMany().HasForeignKey("PortoflioId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PortoflioHasSkill_Portoflio"),
                        r => r.HasOne<Skill>().WithMany().HasForeignKey("SkillId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_PortoflioHasSkill_Skill"),
                        j =>
                        {
                            j.HasKey("SkillId", "PortoflioId");

                            j.ToTable("PortoflioHasSkill");
                        });
            });

            modelBuilder.Entity<Social>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.Type });

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Socials)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Social_UserAccount");
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasOne(d => d.Leader)
                    .WithMany(p => p.Teams)
                    .HasForeignKey(d => d.LeaderId)
                    .HasConstraintName("FK_Team_Freelancer");

                entity.HasOne(d => d.Wallet)
                    .WithMany(p => p.Teams)
                    .HasForeignKey(d => d.WalletId)
                    .HasConstraintName("FK_Team_Wallet");
            });

            modelBuilder.Entity<TeamBidsProject>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.ProjectId });

                entity.HasOne(d => d.Project)
                    .WithMany(p => p.TeamBidsProjects)
                    .HasForeignKey(d => d.ProjectId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamBidsProject_Project");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamBidsProjects)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamBidsProject_Team");
            });

            modelBuilder.Entity<TeamLanguage>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.Language });

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamLanguages)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TeamLanguage_Team");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}